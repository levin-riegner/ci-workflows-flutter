name: Internal Workflow - Uploads QA build

on:
  push:
    branches:
      - "internal/**"
  workflow_dispatch:

# Use bash as the default shell sourcing /etc/bashrc
defaults:
  run:
    shell: bash -leo pipefail {0}

jobs:
  # Config Job
  config:
    name: Load dotenv Config
    runs-on: self-hosted # WAS: ubuntu-latest
    timeout-minutes: 5
    outputs:
      # dotenv variables
      FLUTTER_VERSION: ${{ steps.dotenv.outputs.FLUTTER_VERSION }}
      ANDROID_SUPPORTED: ${{ steps.dotenv.outputs.ANDROID_SUPPORTED }}
      IOS_SUPPORTED: ${{ steps.dotenv.outputs.IOS_SUPPORTED }}
      RUBY_VERSION: ${{ steps.dotenv.outputs.RUBY_VERSION }}
      JAVA_VERSION: ${{ steps.dotenv.outputs.JAVA_VERSION }}
      IS_FLUTTER: ${{ steps.dotenv.outputs.IS_FLUTTER }}
      DEV_ENV_SUPPORTED: ${{ steps.dotenv.outputs.DEV_ENV_SUPPORTED }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # Load dotenv config
      - name: Load dotenv config
        uses: falti/dotenv-action@v0.2.8
        id: dotenv
        with:
          path: ./.github/workflows/.env
          log-variables: true
  # Android Job
  internal_android:
    name: Android Internal Workflow
    needs: config
    if: needs.config.outputs.ANDROID_SUPPORTED == 'true'
    runs-on: self-hosted # WAS: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # SSH Key for private repository dependencies
      - name: Install GitHub SSH Key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.GIT_SSH_KEY }}
      # Install Java
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: "zulu"
          java-version: ${{ needs.config.outputs.JAVA_VERSION }}
      # Fastlane Setup
      # - name: Setup Ruby
      #   uses: ruby/setup-ruby@v1
      #   with:
      #     ruby-version: ${{ needs.config.outputs.RUBY_VERSION }}
      #   env:
      #     ImageOS: "macos12"
      - name: Setup Fastlane
        run: |
          if [ "${{ needs.config.outputs.IS_FLUTTER }}" == "true" ]; then
            cd android
          fi
          gem install bundler
          bundle install
      # Install Flutter
      - if: needs.config.outputs.IS_FLUTTER == 'true' && needs.config.outputs.FLUTTER_VERSION == null
        name: Parse flutter fvm version
        uses: kuhnroyal/flutter-fvm-config-action@v1
      - if: needs.config.outputs.IS_FLUTTER == 'true'
        name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION || needs.config.outputs.FLUTTER_VERSION }}
          channel: "stable"
      # Flutter Dependencies
      - if: needs.config.outputs.IS_FLUTTER == 'true'
        name: Flutter dependencies & Code Generation
        run: |
          flutter pub get
          flutter pub run build_runner build --delete-conflicting-outputs
      # Decrypt Keystore
      - name: Decrypt Keystore
        id: keystore_file
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: "keystore.jks"
          encodedString: ${{ secrets.KEYSTORE_BASE64 }}
      # Flutter build
      - if: needs.config.outputs.IS_FLUTTER == 'true'
        name: Flutter build
        run: flutter build apk -t lib/${entry_file}.dart --flavor ${flavor} --release
        env:
          KEYSTORE_FILE: ${{ steps.keystore_file.outputs.filePath }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          entry_file: main_qa
          flavor: QA
      # Upload QA build
      - name: Upload QA Build
        run: |
          if [ "${{ needs.config.outputs.IS_FLUTTER }}" == "true" ]; then
            cd android
          fi
          bundle exec fastlane internal_release --env $environment is_flutter:$is_flutter
        env:
          KEYSTORE_FILE: ${{ steps.keystore_file.outputs.filePath }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          environment: qa
          is_flutter: ${{ needs.config.outputs.IS_FLUTTER }}
      # Flutter DEV Build
      - if: needs.config.outputs.DEV_ENV_SUPPORTED == 'true'
        name: Flutter DEV Build
        run: flutter build apk -t lib/${entry_file}.dart --flavor ${flavor} --release
        env:
          KEYSTORE_FILE: ${{ steps.keystore_file.outputs.filePath }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          entry_file: main_dev
          flavor: DEV
      # Upload DEV Build
      - if: needs.config.outputs.DEV_ENV_SUPPORTED == 'true'
      - name: Upload DEV Build
        run: |
          if [ "${{ needs.config.outputs.IS_FLUTTER }}" == "true" ]; then
            cd android
          fi
          bundle exec fastlane internal_release --env $environment is_flutter:$is_flutter
        env:
          KEYSTORE_FILE: ${{ steps.keystore_file.outputs.filePath }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          environment: dev
          is_flutter: ${{ needs.config.outputs.IS_FLUTTER }}
  # iOS Job
  internal_ios:
    name: iOS Internal Workflow
    needs: config
    if: needs.config.outputs.IOS_SUPPORTED == 'true'
    runs-on: self-hosted # WAS macos-11
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # SSH Key for private repository dependencies
      - name: Install GitHub SSH Key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.GIT_SSH_KEY }}
      # Fastlane Setup
      # - name: Setup Ruby
      #   uses: ruby/setup-ruby@v1
      #   with:
      #     ruby-version: ${{ needs.config.outputs.RUBY_VERSION }}
      #   env:
      #     ImageOS: "macos12"
      - name: Setup Fastlane
        run: |
          if [ "${{ needs.config.outputs.IS_FLUTTER }}" == "true" ]; then
            cd ios
          fi
          gem install bundler
          bundle install
      # Pod repo update
      - name: Pod Repo update
        run: pod repo update
      # Install Flutter
      - if: needs.config.outputs.IS_FLUTTER == 'true' && needs.config.outputs.FLUTTER_VERSION == null
        name: Parse flutter fvm version
        uses: kuhnroyal/flutter-fvm-config-action@v1
      - if: needs.config.outputs.IS_FLUTTER == 'true'
        name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION || needs.config.outputs.FLUTTER_VERSION }}
          channel: "stable"
      # Flutter Dependencies
      - if: needs.config.outputs.IS_FLUTTER == 'true'
        name: Flutter dependencies & Code Generation
        run: |
          flutter pub get
          flutter pub run build_runner build --delete-conflicting-outputs
      # Flutter build
      - if: needs.config.outputs.IS_FLUTTER == 'true'
        name: Flutter build
        run: flutter build ios -t lib/${entry_file}.dart --flavor ${flavor} --release --no-codesign
        env:
          entry_file: main_qa
          flavor: QA
      # Upload to Appstore Connect
      - name: Upload QA build
        run: |
          if [ "${{ needs.config.outputs.IS_FLUTTER }}" == "true" ]; then
            cd ios
          fi
          bundle exec fastlane testflight_release is_ci:true --env $environment appstore_key:$APPSTORE_KEY_BASE64
        env:
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          APPSTORE_KEY_BASE64: ${{ secrets.APPSTORE_KEY_BASE64 }}
          environment: qa
      # Flutter DEV build
      - if: needs.config.outputs.DEV_ENV_SUPPORTED == 'true'
        name: Flutter DEV Build
        run: flutter build ios -t lib/${entry_file}.dart --flavor ${flavor} --release --no-codesign
        env:
          entry_file: main_dev.dart
          flavor: DEV
      # Upload DEV Build to Appstore Connect
      - if: needs.config.outputs.DEV_ENV_SUPPORTED == 'true'
        name: Upload DEV Build
        run: |
          if [ "${{ needs.config.outputs.IS_FLUTTER }}" == "true" ]; then
            cd ios
          fi
          bundle exec fastlane testflight_release is_ci:true --env $environment appstore_key:$APPSTORE_KEY_BASE64
        env:
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          APPSTORE_KEY_BASE64: ${{ secrets.APPSTORE_KEY_BASE64 }}
          environment: dev
